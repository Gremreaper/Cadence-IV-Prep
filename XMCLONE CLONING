1..V/.SV FILE HANDLING

#!/usr/bin/env perl
use strict;
use warnings;
use Cwd qw(cwd);

my $pwd = cwd;
print "Current working directory: $pwd\n";
#to run our vhdl file we are using this
`/home/gautams/vhdl_regex_2.pl`;
my @store_system;
my $flag = 0;

sub generate_random_string {
    my @chars = ('a'..'z', 'A'..'Z', '0'..'9'); # character set
    return join '', map { $chars[rand @chars] } 1..3; # picking up any 3 letters
}

# Use grep to find all .v or .sv files in current directory and subdirectories
my @files = `find . -type f -name "*.*v" -o -name "*.sv"`;
chomp @files;

if (!@files) {
    print "No .v or .sv files found in current directory or subdirectories.\n";
    exit 0;
}

# Extract module names from all files
foreach my $file_name (@files){
    open my $fh, '<', $file_name or die "Cannot open file $file_name: $!";
    my @lines = <$fh>;
    close $fh;

    foreach my $line (@lines){
        next if $line =~ /^\s*--/;  # Skip comment lines starting with --
        # Remove inline comments starting with -- but preserve code before it
        if ($line =~ /^(.*?)\s*--/) {
            $line = $1;
        }

        # Skip single-line comments(//...)
        if($line =~ m/\/\/.*/){
            $line =~ s/\/\/.*//;
        }

        # Skip inline multi-line comments(/* .... */)
        if ($line =~ m/\/\*.*?\*\//) {
            $line =~ s/\/\*.*?\*\///g;
        }

        # Starting the skipping of multi-line comments(/*....)
        if($line =~ m/\/\*/){
            $flag = 1;
            $line =~ s/\/\*.*//;
        }
        # Ending of multi-line comments (...*/)
        elsif($flag && $line =~ m/\*\//){
            $line =~ s/.*\*\///;
            $flag = 0;
        }
        # Line inside the multi-line comment
        elsif($flag){
            $line =~ s/.*//;
        }

        while($line =~ m/\bmodule\b\s+(\w+).*/){
            $line =~ s/\bmodule\b\s+(\w+).*//;
			print "#$1\n";
            push @store_system, $1;
        }
    }
}

foreach my $file (@files){
    # Read entire file content
    open my $fh, '<', $file or die "Cannot open file $file: $!";
    local $/ = undef;
    my $content = <$fh>;
    close $fh;

    my @lines = split /\n/, $content;
    my @new_lines;
    my $buffer = '';
    my $in_instance = 0;

    foreach my $line (@lines){
        # Skip single line comments
        next if $line =~ /^\s*\/\//;

        # Remove inline comments starting with //
        if($line =~ /^(.*?)\s*\/\//){
            $line = $1;
        }

        if(!$in_instance){
            # Detect the start of instance declaration:
            if($line =~ /^\s*\w+\s+\w+\s*\(/){
                $buffer = $line;
                $in_instance = 1;
                # If the line ends with a semicolon, instance is single line
                if($line =~ /;\s*$/){
                    push @new_lines, $buffer;
                    $buffer = '';
                    $in_instance = 0;
                }
            } else {
                push @new_lines, $line;
            }
        } else {
            # Continue buffering lines
            $buffer .= ' ' . $line;
            if($line =~ /;\s*$/){
                push @new_lines, $buffer;
                $buffer = '';
                $in_instance = 0;
            }
        }
    }
    push @new_lines, $buffer if $buffer ne '';

    my $new_file = $file . "_dup";
    open my $out, '>', $new_file or die "Cannot write to file $new_file: $!";

    for(my $i = 0; $i < @new_lines; $i++){
        my $statement = $new_lines[$i];
        print $out $statement . "\n";

        foreach my $res (@store_system){
            if($statement =~ m/\b($res.*?)\b\s+(\w*\w)\s*(\(.*\);)/){
                for (my $k = 0; $k < 5; $k++) {
                    my $random_string = generate_random_string();
                    print $out $1 . " " . $2 . "_" . $random_string . $3 . "\n";
                }
                last;
            }
			elsif($statement =~ m/($res.*?)\s+(\w*\w)\s*(\[.*\])\s*(\(.*\);)/){
			    for(my $k = 0; $k<5; $k++){
				    my $random_string = generate_random_string();
					print $out $1 . " " . $2 . "_" . $random_string . $3 . $4 . "\n";
				}
				last;
			}
        }
    }
    close $out;
    rename $new_file, $file or die "Cannot rename $new_file to $file: $!";
}


2..VHDL FILES HANDLE

#!/usr/bin/env perl
use strict;
use warnings;
use Cwd qw(cwd);

my $pwd = cwd;
print "Current working directory: $pwd\n";
my @store_system;

#For random string generation to add up at the end of instance

sub generate_random_string {
    my @chars = ('a'..'z', 'A'..'Z', '0'..'9'); # character set
    return join '', map { $chars[rand @chars] } 1..3; # picking up any 3 letters
}

# Use grep to find all .vhd files in current directory and subdirectories
my @vhd_files = `find . -type f -name "*.vhd"`;
chomp @vhd_files;

if (!@vhd_files) {
    print "No .vhd files found in current directory or subdirectories.\n";
    exit 0;
}

# Extract identifiers from the first .vhd file
foreach my $file_name (@vhd_files){
    open my $fh, '<', $file_name or die "Cannot open file $file_name: $!";
    my @lines = <$fh>;
    close $fh;

    foreach my $line (@lines) {
        next if $line =~ /^\s*--/;  # Skip comment lines starting with --
        # Remove inline comments starting with -- but preserve code before it
        if ($line =~ /^(.*?)\s*--/) {
            $line = $1;
        }

        while($line =~ m/\:\s+(\w+)\s+.*\bport map\b/) {
           $line =~ s/\:\s+(\w+)\s+.*\bport map\b//;
           push @store_system, $1;
        }

	while($line =~ m/\:\s+(\w+)(?:\s+GENERIC\s+MAP\s*\([^)]*\))?\s+\bPORT MAP\b/i) {
            $line =~ s/\:\s+(\w+)(?:\s+GENERIC\s+MAP\s*\([^)]*\))?\s+\bPORT MAP\b//i;
            push @store_system, $1;
        }

        while ($line=~m/\:\s*(\w+)(?:\s+generic\s+map\s*\([^()]*\))?\s+port\s+map\b/i){
            $line =~ s/\:\s+(\w+)(?:\s+generic\s+map\s*\([^()]*\))?\s+\bport map\b//i;
            push @store_system, $1;
        }

	while ($line=~m/\:\s*(\w+)(?:\s+generic\s+MAP\s*\([^()]*\))?\s+port\s+MAP\b/i){
            $line =~ s/\:\s+(\w+)(?:\s+generic\s+MAP\s*\([^()]*\))?\s+\bport MAP\b//i;
            push @store_system, $1;
        }

	while ($line=~m/\:\s*(\w+)(?:\s+GENERIC\s+map\s*\([^()]*\))?\s+PORT\s+map\b/i){
            $line =~ s/\:\s+(\w+)(?:\s+GENERIC\s+map\s*\([^()]*\))?\s+\bPORT map\b//i;
            push @store_system, $1;
        }	
    }
}

foreach my $file (@vhd_files) {
    # Read entire file content
    open my $fh, '<', $file or die "Cannot open file $file: $!";
    local $/ = undef;
    my $content = <$fh>;
    close $fh;

    # Convert multi-line instances to single-line instances
    my @lines = split /\n/, $content;
    my @new_lines;
    my $buffer = '';
    my $in_instance = 0;

    foreach my $line (@lines) {
        next if $line =~ /^\s*--/;
        if ($line =~ /^(.*?)\s*--/) {
            $line = $1;
        }
        if (!$in_instance) {
            if ($line =~ /^\s*\w+\s*:\s*(\w+)/) {
                $buffer = $line;
                $in_instance = 1;
                if ($line =~ /;\s*$/) {
                    push @new_lines, $buffer;
                    $buffer = '';
                    $in_instance = 0;
                }
            } else {
                push @new_lines, $line;
            }
        } else {
            $buffer .= ' ' . $line;
            if ($line =~ /;\s*$/) {
                push @new_lines, $buffer;
                $buffer = '';
                $in_instance = 0;
            }
        }
    }
    push @new_lines, $buffer if $buffer ne '';

    #foreach my $res(@store_system){
    # print "## $res\n";
    #}

    my $new_file = $file . "_dup";
    open my $out, '>', $new_file or die "Cannot write to file $new_file: $!";

    for (my $i = 0; $i < @new_lines; $i++) {
        my $line = $new_lines[$i];
        print $out $line . "\n";

        foreach my $res (@store_system) {
            if ($line =~ m/(.*?)\s+(\s*:\s*($res).*\s+port\s+map\s*\(.*\)\;)/i) {
                for (my $j = 0; $j < 5; $j++) {
                    my $random_string = generate_random_string();
                    print $out $1 . "_" . $random_string . $2 . "\n";
                }
                last;
            }

	    if ($line =~ m/(.*?)(\s*:\s*($res).*\s+PORT\s+MAP\s*\(.*\)\;)/i) {
                for (my $j = 0; $j < 5; $j++) {
                    my $random_string = generate_random_string();
                    print $out $1 . "_" . $random_string . $2 . "\n";
                }
                last;
            }

        }
    }

    close $out;
    rename $new_file, $file or die "Cannot rename $new_file to $file: $!";
}


